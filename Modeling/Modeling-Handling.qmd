---
title: Handling data tables

bibliography: references.bib
---

# Introduction to the dataset

This dataset is derived from an experimental model of cerebral ischemia that I carried out during my Postdoctoral fellow at Universit√© Laval in Quebec, Canada. I was a scientists working in the field of cerebral ischemia in mouse models. After ischemia, I studied the animals's brain to see how glia react and how they form the glial scar. 

The dataset we will work with contains measurements of the intensity of two molecular markers GFAP and PDGFR-B. We will explore how the expression of these markers evolve during the first month after ischemia.

# Load an explore the dataset structure

In the first place, we load the `.csv` data we have available. We use the `head` function to print the first row of the dataset.

```{r}
#| label: Table_Load

Table_Raw <- read.csv(
  file = "resources/Raw_Widefield_5x_Ipsilateral_Gfap-Pdgfrb_Inten.csv",
  header = TRUE
)

head(Table_Raw)
```
We can visualize the head of the dataset and have a first idea of its content. To explore better its structure we can use the `str` function.

```{r}
#| label: Table_Structure

str(Table_Raw)
```
Here, we see that the file contains 49 rows (observations) and 5 columns (variables). We can also visualize the data types integrals (int), character (chr), and numeric (num). We can also visualize the data using the `summarytools` package.

```{r}
#| label: Table_Vis

library(summarytools)

view(summarytools::dfSummary(Table_Raw, method = "viewer"))
```

In this mode, we can see also distribution and percentages as an HTML output.  

In the following, we will transform this table and prepare it for exploratory data analysis (EDA) and posterior statistical modeling.


# Transform the data

In the first place, we operate to eliminate the first column which numerate the rows but has no valuable ID or variable information. Secondly, the `Brain` column contains identifiers or grouping variables derived from the naming of the source file (microscopy image) processed. For this reason, using naming conventions that allow to extract identifiers is a wise strategy when handling data. 

For the `Brain` variable:

- The first strain (i.e Td12) indicates the unique animal ID.
- The second, (i.e 7D) indicated the time point after injury in which the brain was harvested and fixed for immunohistochemestry.
- The third strain (MCAO or SHAM) indicates the condition of the animals. MCAO for animals subjected to cerebral ischemia, and SHAM for sham animals subjected to the sirurgical prpcedure but with out the occlusion of the middle cerebral artery. 

```{r}
#| label: Table_Extract_Ids
#| warnings: false
#| message: false

library(tidyverse)

Table_Trans <- Table_Raw %>%
  select(-1) %>% # Remove the first column
  separate(Brain, into = c("Animalid", "DPI", "Condition"), sep = "[_\\.]") # Extract metadata and separate into columns

str(Table_Trans)
```

Our new table, called `Table_Trans` not has 6 variables, three characters and three numeric. Given the explanation of the dataset, I think that we can agree that `DPI` and `Condition` must be factors, given that are grouping variables (groups) that divide the sample of animals. We'll do two different operations. First, setup these variables as factors with their corresponding levels. Second, we'll create a numeric variable for DPI for modeling purposes.   


```{r}
#| label: Table_setFactors

library(gt)

# Set the mapping for DPI as numeric variable
DPI_mapping <- c("0D" = "0", "3D" = "3", "7D" = "7", "14D" = "14", "30D" = "30")

Table_Clean <- Table_Trans %>%
  mutate(
    # Convert DPI using the mapping and setting SHAM condition to 0
    DPI_num = as.numeric(DPI_mapping[as.character(DPI)]),
    DPI_num = case_when(
      Condition == "SHAM" ~ 0,
      TRUE ~ DPI_num
    ),
    # Set factor levels for Condition
    Condition = factor(Condition, levels = c("SHAM", "MCAO")),
    DPI = factor(DPI, levels = c("3D", "7D", "14D", "30D"))
  )

str(Table_Clean)

gt::gt(Table_Clean[1:10, ])
```

After these operations, we can see that we have a character factor (Animalid), DPI and Condition as *organized factors*, and our numeric variables, including the newly created `DPI_num`. As it is, our table is in a tidy format and ready for exploratory data visualization and posterior modeling. 

If we want, We can export an HTML file of this table for for documentation.

```{r}
#| label: Table_see_Final

view(summarytools::dfSummary(Table_Clean, method = "viewer"))
```
Finally, we save the tidy `Table_Clean` table as .csv file. This can be share as **Processed Data** in repositories hosting scientific data. By setting the argument `row.names=FALSE`, we avoid that R created a first column with the columns number (name) as appeared in the raw data we loaded at the beginning of this chapter.

```{r}
#| label: Table_save

write.csv(Table_Clean, "resources/Table_Clean.csv", row.names = FALSE)
```


Our data es ready for [exploratory data analysis](Modeling-EDA.qmd).

# References

::: {#refs}
:::


```{r}
sessionInfo()
```
